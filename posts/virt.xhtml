<hr>
<p>layout: post
    title: Virtualization and you + a crash course</p>
<h2 id="date-2022-11-9">date: 2022-11-9</h2>
<p><br></p>
<h1 id="introduction">INTRODUCTION</h1>
<p>What is virtualization ? </p>
<p>Virtualization uses software to create an abstraction layer over computer hardware that allows the hardware elements
    of a single computer—processors, memory, storage and more—to be divided into multiple virtual computers, commonly
    called virtual machines (VMs). Each VM runs its own operating system (OS) and behaves like an independent computer,
    even though it is running on just a portion of the actual underlying computer hardware.</p>
<p>It follows that virtualization enables more efficient utilization of physical computer hardware and allows a greater
    return on an organization’s hardware investment.</p>
<p>Today, virtualization is a standard practice in enterprise IT architecture. It is also the technology that drives
    cloud computing economics. Virtualization enables cloud providers to serve users with their existing physical
    computer hardware; it enables cloud users to purchase only the computing resources they need when they need it, and
    to scale those resources cost-effectively as their workloads grow [VPS] (<a
        href="https://www.ibm.com/cloud/learn/vps">https://www.ibm.com/cloud/learn/vps</a>).</p>
<h1 id="benfetis-of-virtualization">Benfetis of virtualization</h1>
<ul>
    <li>
        <p>Resource efficiency: Before virtualization, each application server required its own dedicated physical
            CPU—IT staff would purchase and configure a separate server for each application they wanted to run. (IT
            preferred one application and one operating system (OS) per computer for reliability reasons.) Invariably,
            each physical server would be underused. In contrast, server virtualization lets you run several
            applications—each on its own VM with its own OS—on a single physical computer (typically an x86 server)
            without sacrificing reliability. This enables maximum utilization of the physical hardware’s computing
            capacity.</p>
    </li>
    <li>
        <p>Easier management: Replacing physical computers with software-defined VMs makes it easier to use and manage
            policies written in software. This allows you to create automated IT service management workflows. For
            example, automated deployment and configuration tools enable administrators to define collections of virtual
            machines and applications as services, in software templates. This means that they can install those
            services repeatedly and consistently without cumbersome, time-consuming. and error-prone manual setup.
            Admins can use virtualization security policies to mandate certain security configurations based on the role
            of the virtual machine. Policies can even increase resource efficiency by retiring unused virtual machines
            to save on space and computing power.7</p>
    </li>
    <li>
        <p>Minimal downtime: OS and application crashes can cause downtime and disrupt user productivity. Admins can run
            multiple redundant virtual machines alongside each other and failover between them when problems arise.
            Running multiple redundant physical servers is more expensive.</p>
    </li>
    <li>
        <p>Faster provisioning: Buying, installing, and configuring hardware for each application is time-consuming.
            Provided that the hardware is already in place, provisioning virtual machines to run all your applications
            is significantly faster. You can even automate it using management software and build it into existing
            workflows.</p>
    </li>
</ul>
<h1 id="hypervisors">Hypervisors</h1>
<p>There are actually two types of hypervisors: </p>
<ul>
    <li>
        <p><strong>Type 1 or bare metal hypervisors</strong> interact with the underlying physical resources, replacing
            the traditional operating system altogether. They most commonly appear in virtual server scenarios.</p>
    </li>
    <li>
        <p><strong>Type 2 hypervisors</strong> run as an application on an existing OS. Most commonly used on endpoint
            devices to run alternative operating systems, they carry a performance overhead because they must use the
            host OS to access and coordinate the undrlying hardware resources.</p>
    </li>
</ul>
<h2 id="type-1-hypervisors-">Type 1 hypervisors:</h2>
<ol>
    <li>VMware ESX and ESXi</li>
</ol>
<p>These hypervisors offer advanced features and scalability, but require licensing, so the costs are higher.</p>
<p>There are some lower-cost bundles that VMware offers and they can make hypervisor technology more affordable for
    small infrastructures.</p>
<p>VMware is the leader in the Type-1 hypervisors. Their vSphere/ESXi product is available in a free edition and 5
    commercial editions.</p>
<ol>
    <li>Microsoft Hyper-V</li>
</ol>
<p>The Microsoft hypervisor, Hyper-V doesn’t offer many of the advanced features that VMware’s products provide.
    However, with XenServer and vSphere, Hyper-V is one of the top 3 Type-1 hypervisors.</p>
<p>It was first released with Windows Server, but now Hyper-V has been greatly enhanced with Windows Server 2012
    Hyper-V. Hyper-V is available in both a free edition (with no GUI and no virtualization rights) and 4 commercial
    editions – Foundations (OEM only), Essentials, Standard, and Datacenter. Hyper-V</p>
<ol>
    <li>Citrix XenServer</li>
</ol>
<p>It began as an open source project.
    The core hypervisor technology is free, but like VMware’s free ESXi, it has almost no advanced features.
    Xen is a type-1 bare-metal hypervisor. Just as Red Hat Enterprise Virtualization uses KVM, Citrix uses Xen in the
    commercial XenServer.</p>
<p>Today, the Xen open source projects and community are at Xen.org. Today, XenServer is a commercial type-1 hypervisor
    solution from Citrix, offered in 4 editions. Confusingly, Citrix has also branded their other proprietary solutions
    like XenApp and XenDesktop with the Xen name.</p>
<ol>
    <li>Oracle VM</li>
</ol>
<p>The Oracle hypervisor is based on the open source Xen.
    However, if you need hypervisor support and product updates, it will cost you.
    Oracle VM lacks many of the advanced features found in other bare-metal virtualization hypervisors.</p>
<p>##Type 2 hypervisor</p>
<ol>
    <li>VMware Workstation/Fusion/Player (CLOSED SOURCE PRIVATE USE s-FREE)</li>
</ol>
<p>VMware Player is a free virtualization hypervisor.</p>
<p>It is intended to run only one virtual machine (VM) and does not allow creating VMs.
    VMware Workstation is a more robust hypervisor with some advanced features, such as record-and-replay and VM
    snapshot support.</p>
<p>VMware Workstation has three major use cases:</p>
<pre><code><span class="hljs-keyword">for</span> <span class="hljs-built_in">running</span> multiple different operating systems <span class="hljs-keyword">or</span> versions <span class="hljs-keyword">of</span> one OS <span class="hljs-keyword">on</span> one desktop,
<span class="hljs-keyword">for</span> developers <span class="hljs-keyword">that</span> need sandbox environments <span class="hljs-keyword">and</span> snapshots, <span class="hljs-keyword">or</span>
<span class="hljs-keyword">for</span> labs <span class="hljs-keyword">and</span> demonstration purposes.
</code></pre>
<ol>
    <li>VMware Server(CLOSED SOURCE)</li>
</ol>
<p>VMware Server is a free, hosted virtualization hypervisor that’s very similar to the VMware Workstation.
    VMware has halted development on Server since 2009</p>
<ol>
    <li>Microsoft Virtual PC (CLOSED SOURCE)</li>
</ol>
<p>This is the latest Microsoft’s version of this hypervisor technology, Windows Virtual PC and runs only on Windows 7
    and supports only Windows operating systems running on it.</p>
<ol>
    <li>Oracle VM VirtualBox (FOSS)</li>
</ol>
<p>VirtualBox hypervisor technology provides reasonable performance and features if you want to virtualize on a budget.
    Despite being a free, hosted product with a very small footprint, VirtualBox shares many features with VMware
    vSphere and Microsoft Hyper-V.</p>
<ol>
    <li>Red Hat Enterprise Virtualization (OSS PAID)</li>
</ol>
<p>Red Hat’s Kernel-based Virtual Machine (KVM) has qualities of both a hosted and a bare-metal virtualization
    hypervisor. It can turn the Linux kernel itself into a hypervisor so the VMs have direct access to the physical
    hardware.</p>
<ol>
    <li>KVM (FOSS)</li>
</ol>
<p>This is a virtualization infrastructure for the Linux kernel. It supports native virtualization on processors with
    hardware virtualization extensions.</p>
<p>The open-source KVM (or Kernel-Based Virtual Machine) is a Linux-based type-1 hypervisor that can be added to most
    Linux operating systems including Ubuntu, Debian, SUSE, and Red Hat Enterprise Linux, but also Solaris, and Windows.
</p>
<ol>
    <li>KVM</li>
</ol>
<p>This is a virtualization infrastructure for the Linux kernel. It supports native virtualization on processors with
    hardware virtualization extensions.</p>
<p>The open-source KVM (or Kernel-Based Virtual Machine) is a Linux-based type-1 hypervisor that can be added to most
    Linux operating systems including Ubuntu, Debian, SUSE, and Red Hat Enterprise Linux, but also Solaris, and Windows.
</p>
<h2 id="types-of-virtualization">Types of virtualization</h2>
<p>To this point we’ve discussed server virtualization, but many other IT infrastructure elements can be virtualized to
    deliver significant advantages to IT managers (in particular) and the enterprise as a whole. In this section,
    we&#39;ll cover the following types of virtualization:</p>
<pre><code>Desktop virtualization
Network virtualization
Storage virtualization
<span class="hljs-built_in">Data</span> virtualization
Application virtualization
<span class="hljs-built_in">Data</span> center virtualization
CPU virtualization
GPU virtualization
Linux virtualization
Cloud virtualization
</code></pre>
<p>Desktop virtualization</p>
<p>Desktop virtualization lets you run multiple desktop operating systems, each in its own VM on the same computer.</p>
<p>There are two types of desktop virtualization:</p>
<pre><code>Virtual desktop infrastructure (VDI) runs multiple desktops <span class="hljs-keyword">in</span> VMs <span class="hljs-keyword">on</span> a central server <span class="hljs-keyword">and</span> streams them <span class="hljs-keyword">to</span> users who <span class="hljs-built_in">log</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">on</span> thin client devices. In this way, VDI lets an organization provide <span class="hljs-keyword">its</span> users access <span class="hljs-keyword">to</span> variety <span class="hljs-keyword">of</span> OS's <span class="hljs-keyword">from</span> any device, <span class="hljs-keyword">without</span> installing OS's <span class="hljs-keyword">on</span> any device. See <span class="hljs-string">"What is Virtual Desktop Infrastructure (VDI)?"</span> <span class="hljs-keyword">for</span> a more <span class="hljs-keyword">in</span>-depth explanation.
Local desktop virtualization runs a hypervisor <span class="hljs-keyword">on</span> a <span class="hljs-keyword">local</span> computer, enabling <span class="hljs-keyword">the</span> user <span class="hljs-keyword">to</span> <span class="hljs-built_in">run</span> one <span class="hljs-keyword">or</span> more additional OSs <span class="hljs-keyword">on</span> <span class="hljs-keyword">that</span> computer <span class="hljs-keyword">and</span> switch <span class="hljs-keyword">from</span> one OS <span class="hljs-keyword">to</span> another <span class="hljs-keyword">as</span> needed <span class="hljs-keyword">without</span> changing anything <span class="hljs-keyword">about</span> <span class="hljs-keyword">the</span> primary OS.
</code></pre>
<p>For more information on virtual desktops, see “Desktop-as-a-Service (DaaS).”
    Network virtualization</p>
<p>Network virtualization uses software to create a “view” of the network that an administrator can use to manage the
    network from a single console. It abstracts hardware elements and functions (e.g., connections, switches, routers,
    etc.) and abstracts them into software running on a hypervisor. The network administrator can modify and control
    these elements without touching the underlying physical components, which dramatically simplifies network
    management.</p>
<p>Types of network virtualization include software-defined networking (SDN), which virtualizes hardware that controls
    network traffic routing (called the “control plane”), and network function virtualization (NFV), which virtualizes
    one or more hardware appliances that provide a specific network function (e.g., a firewall, load balancer, or
    traffic analyzer), making those appliances easier to configure, provision, and manage.
    Storage virtualization</p>
<p>Storage virtualization enables all the storage devices on the network— whether they’re installed on individual
    servers or standalone storage units—to be accessed and managed as a single storage device. Specifically, storage
    virtualization masses all blocks of storage into a single shared pool from which they can be assigned to any VM on
    the network as needed. Storage virtualization makes it easier to provision storage for VMs and makes maximum use of
    all available storage on the network.</p>
<p>For a closer look at storage virtualization, check out &quot;What is Cloud Storage?&quot;
    Data virtualization</p>
<p>Modern enterprises store data from multiple applications, using multiple file formats, in multiple locations, ranging
    from the cloud to on-premise hardware and software systems. Data virtualization lets any application access all of
    that data—irrespective of source, format, or location.</p>
<p>Data virtualization tools create a software layer between the applications accessing the data and the systems storing
    it. The layer translates an application’s data request or query as needed and returns results that can span multiple
    systems. Data virtualization can help break down data silos when other types of integration aren’t feasible,
    desirable, or affordable.
    Application virtualization</p>
<p>Application virtualization runs application software without installing it directly on the user’s OS. This differs
    from complete desktop virtualization (mentioned above) because only the application runs in a virtual
    environment—the OS on the end user’s device runs as usual. There are three types of application virtualization: </p>
<pre><code>Local <span class="hljs-built_in">application</span> virtualization: The entire <span class="hljs-built_in">application</span> runs <span class="hljs-keyword">on</span> <span class="hljs-keyword">the</span> endpoint device <span class="hljs-keyword">but</span> runs <span class="hljs-keyword">in</span> a runtime environment <span class="hljs-keyword">instead of</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">the</span> native hardware.
Application streaming: The <span class="hljs-built_in">application</span> lives <span class="hljs-keyword">on</span> a server which sends small components <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> software <span class="hljs-keyword">to</span> <span class="hljs-built_in">run</span> <span class="hljs-keyword">on</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">end</span> user's device when needed.
Server-based <span class="hljs-built_in">application</span> virtualization The <span class="hljs-built_in">application</span> runs entirely <span class="hljs-keyword">on</span> a server <span class="hljs-keyword">that</span> sends only <span class="hljs-keyword">its</span> user interface <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> client device.
</code></pre>
<p>Data center virtualization</p>
<p>Data center virtualization abstracts most of a data center’s hardware into software, effectively enabling an
    administrator to divide a single physical data center into multiple virtual data centers for different clients.</p>
<p>Each client can access its own infrastructure as a service (IaaS), which would run on the same underlying physical
    hardware. Virtual data centers offer an easy on-ramp into cloud-based computing, letting a company quickly set up a
    complete data center environment without purchasing infrastructure hardware.
    CPU virtualization</p>
<p>CPU (central processing unit) virtualization is the fundamental technology that makes hypervisors, virtual machines,
    and operating systems possible. It allows a single CPU to be divided into multiple virtual CPUs for use by multiple
    VMs.</p>
<p>At first, CPU virtualization was entirely software-defined, but many of today’s processors include extended
    instruction sets that support CPU virtualization, which improves VM performance.
    GPU virtualization</p>
<p>A GPU (graphical processing unit) is a special multi-core processor that improves overall computing performance by
    taking over heavy-duty graphic or mathematical processing. GPU virtualization lets multiple VMs use all or some of a
    single GPU’s processing power for faster video, artificial intelligence (AI), and other graphic- or math-intensive
    applications.</p>
<pre><code>Pass-through GPUs make <span class="hljs-keyword">the</span> entire GPU available <span class="hljs-built_in">to</span> <span class="hljs-keyword">a</span> single guest OS.
Shared vGPUs <span class="hljs-built_in">divide</span> physical GPU cores <span class="hljs-keyword">among</span> several virtual GPUs (vGPUs) <span class="hljs-keyword">for</span> use <span class="hljs-keyword">by</span> server-based VMs.
</code></pre>
<p>Linux virtualization</p>
<p>Linux includes its own hypervisor, called the kernel-based virtual machine (KVM), which supports Intel and AMD’s
    virtualization processor extensions so you can create x86-based VMs from within a Linux host OS.</p>
<p>As an open source OS, Linux is highly customizable. You can create VMs running versions of Linux tailored for
    specific workloads or security-hardened versions for more sensitive applications.
    Cloud virtualization</p>
<p>As noted above, the cloud computing model depends on virtualization. By virtualizing servers, storage, and other
    physical data center resources, cloud computing providers can offer a range of services to customers, including the
    following: </p>
<pre><code>Infrastructure <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> service (IaaS): Virtualized server, storage, <span class="hljs-keyword">and</span> network resources you can configure based <span class="hljs-keyword">on</span> <span class="hljs-title">their</span> <span class="hljs-title">requirements</span>.  
Platform <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> service (PaaS): Virtualized development tools, databases, <span class="hljs-keyword">and</span> other cloud-based services you can use <span class="hljs-built_in">to</span> build you own cloud-based applications <span class="hljs-keyword">and</span> solutions.
Software <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> service (SaaS): Software applications you use <span class="hljs-keyword">on</span> <span class="hljs-title">the</span> <span class="hljs-title">cloud</span>. <span class="hljs-title">SaaS</span> <span class="hljs-title">is</span> <span class="hljs-title">the</span> <span class="hljs-title">cloud-based</span> <span class="hljs-title">service</span> <span class="hljs-title">most</span> <span class="hljs-title">abstracted</span> <span class="hljs-title">from</span> <span class="hljs-title">the</span> <span class="hljs-title">hardware</span>.
</code></pre>
<p>If you’d like to learn more about these cloud service models, see our guide: “IaaS vs. PaaS vs. SaaS.”</p>
<h2 id="security">Security</h2>
<p>Virtualization offers some security benefits. For example, VMs infected with malware can be rolled back to a point in
    time (called a snapshot) when the VM was uninfected and stable; they can also be more easily deleted and recreated.
    You can’t always disinfect a non-virtualized OS, because malware is often deeply integrated into the core components
    of the OS, persisting beyond system rollbacks.</p>
<p>Virtualization also presents some security challenges. If an attacker compromises a hypervisor, they potentially own
    all the VMs and guest operating systems. Because hypervisors can also allow VMs to communicate between themselves
    without touching the physical network, it can be difficult to see their traffic, and therefore to detect suspicious
    activity.</p>
<p>A Type 2 hypervisor on a host OS is also susceptible to host OS compromise.</p>
<p>The market offers a range of virtualization security products that can scan and patch VMs for malware, encrypt entire
    VM virtual disks, and control and audit VM access.</p>
<h2 id="guide-to-install-kvm-on-arch-https-archlinux-org-">Guide to install KVM on <a
        href="https://archlinux.org">Arch</a></h2>
<h2 id="checking-support-for-kvm">Checking support for KVM</h2>
<p><strong>Hardware support</strong></p>
<p>Checking hardware support for KVM (named VT-x for Intel and AMD-V for AMD CPUs):</p>
<pre><code class="lang-term"><span class="hljs-attr">LC_ALL</span>=C lscpu | grep Virtualization
</code></pre>
<p>Or:</p>
<pre><code class="lang-term">grep -E --color=<span class="hljs-built_in">auto</span> 'vmx|<span class="hljs-type">svm</span>|<span class="hljs-type">0xc0f</span>' /proc/cpuinfo
</code></pre>
<p>If nothing is displayed after running either command, then your processor does <strong>not</strong> support hardware
    virtualization, and you will <strong>not</strong> be able to use KVM.</p>
<p><strong>Note:</strong> You may need to enable virtualization support in your BIOS. All x86_64 processors manufactured
    by AMD and Intel in the last 10 years support virtualization. If it looks like your processor does not support
    virtualization, it&#39;s almost certainly turned off in the BIOS.</p>
<p><strong>Kernel support</strong></p>
<p>Check if the necessary modules: <code>kvm</code> and either <code>kvm_amd</code> or <code>kvm_intel</code>, are
    available in the kernel:</p>
<pre><code class="lang-term">zgrep CONFIG_KVM /proc/<span class="hljs-built_in">config</span>.gz
</code></pre>
<p>You must see the module set either to <code>y</code> or <code>m</code>.</p>
<p>Then ensure that kernel modules are automatically loaded at boot:</p>
<pre><code class="lang-term">lsmod <span class="hljs-string">| grep kvm</span>
</code></pre>
<p>Output example:</p>
<pre><code class="lang-term">kvm_intel             <span class="hljs-number">245760</span>  <span class="hljs-number">0</span>
kvmgt                  <span class="hljs-number">28672</span>  <span class="hljs-number">0</span>
mdev                   <span class="hljs-number">20480</span>  <span class="hljs-number">2</span> kvmgt,vfio_mdev
vfio                   <span class="hljs-number">32768</span>  <span class="hljs-number">3</span> kvmgt,vfio_mdev,vfio_iommu_type1
kvm                   <span class="hljs-number">737280</span>  <span class="hljs-number">2</span> kvmgt,kvm_intel
irqbypass              <span class="hljs-number">16384</span>  <span class="hljs-number">1</span> kvm
</code></pre>
<p>If the command returns nothing, the module needs to be loaded manually, see: <a
        href="https://wiki.archlinux.org/index.php/Kernel_module#Manual_module_handling">Kernel module handling</a></p>
<p><strong>Note:</strong> If modprobing <code>kvm_intel</code> or <code>kvm_amd</code> fails but modprobing
    <code>kvm succeeds</code>, and <code>lscpu</code> claims that hardware acceleration is supported, check the BIOS
    settings. Some vendors, especially laptop vendors, disable these processor extensions by default. To determine
    whether there is no hardware support or whether the extensions are disabled in BIOS, the output from
    <code>dmesg</code> after having failed to modprobe will tell.
</p>
<p><br></p>
<h3 id="para-virtualization-with-virtio">Para-virtualization with Virtio</h3>
<p><strong>Kernel Support</strong></p>
<p>Check if the VIRTIO modules are available in the kernel inside the virtual machine:</p>
<pre><code class="lang-term">zgrep VIRTIO /proc/<span class="hljs-built_in">config</span>.gz
</code></pre>
<p>Then, check if kernel modules are automatically loaded at boot:</p>
<pre><code class="lang-term">lsmod <span class="hljs-string">| grep virtio</span>
</code></pre>
<p>Also here, if the above commands return nothing, you need to load the kernel modules manually.</p>
<p><br></p>
<h3 id="install-qemu-libvirt-virt-manager-and-other-packages-needed">Install qemu, libvirt, virt-manager and other
    packages needed</h3>
<pre><code class="lang-term"><span class="hljs-attribute">sudo pacman -S libvirt qemu virt-manager ebtables dnsmasq bridge-utils</span>
</code></pre>
<p>For complete information about packages and other utilities and settings see:</p>
<p><a href="https://wiki.archlinux.org/index.php/QEMU">QEMU</a></p>
<p><a href="https://wiki.archlinux.org/index.php/Libvirt">libvirt</a></p>
<p><a href="https://wiki.archlinux.org/index.php/Libvirt#Client">libvirt clients</a></p>
<p><br></p>
<h3 id="set-user-group">Set user Group</h3>
<p>Add user to <code>libvirt</code> Group:</p>
<pre><code class="lang-term">sudo usermod -aG libvirt <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>
</code></pre>
<p><br></p>
<h3 id="systemctl-service-libvirtd">Systemctl Service libvirtd</h3>
<p>Start the <code>libvirtd.service</code> service:</p>
<pre><code class="lang-term">sudo systemctl <span class="hljs-literal">start</span> libvirtd.service
</code></pre>
<p>Enable <code>libvirt.service</code> service at boot:</p>
<pre><code class="lang-term">sudo systemctl <span class="hljs-built_in">enable</span> libvirtd.service
</code></pre>
<p>Start <code>virt-manager</code>:</p>
<pre><code class="lang-term"><span class="hljs-attribute">virt-manager</span>
</code></pre>
<p>See: <a href="https://virt-manager.org/">Virtual Machine Manager</a></p>
<hr>
<p>Source: <a href="https://wiki.archlinux.org/index.php/KVM">KVM - ArchWiki</a></p>